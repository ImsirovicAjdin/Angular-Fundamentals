import { Component } from '@angular/core'
import { EventService } from '../shared/event.service'
import { ActivatedRoute } from '@angular/router'
import { IEvent } from '../shared/index';

@Component({
    templateUrl: './event-details.component.html',
    styles: [`
    .container { padding-left:20px; padding-right: 20px; }
    .event-image { height: 100px; }
  `]
})

export class EventDetailsComponent {
    event:IEvent

    constructor(private eventService:EventService, private route:ActivatedRoute) {
  
    }
    ngOnInit() {
        // this.event = this.eventService.getEvent(1)
        this.event = this.eventService.getEvent(+this.route.snapshot.params['id']) // we're casting to a number with the + in front of 'this' 
    }
}
/*
7.6
Creating Your First Reactive Form
(1)
Okay, this login form that we just created was a template driven form, meaning we built our whole form and all its validation in the HTML itself but there is another way to do it and either one is completely acceptable depending on your needs. The other option is to use a reactive form, also known as a model driven form. Basically this means you define your fields and your validation in your component and then wire them up to your fields in your HTML template. This requires a little extra code but it has some advantages. For example, you have the option of building your form and validation more dynamically based on decisions made in your code and another great benefit is that it makes all of your validation logic unit testable. So let's take a look at how to do this. To demonstrate this, we'll create another simple form. You may remember that in a previous clip, we created this profile page that we'd said we'd finish later. Let's go ahead and create a model driven form for this page. So over here in our profile component, it's currently using an in line template. Let's just delete that and use a template Url, so its template will be here and let's go ahead and create that. Okay, and we'll grab the HTML for that from our GitHub Helper Repo. So over here in the user folder there is this profile component HTML, let's grab that, and paste that in here, okay, and again, this is just HTML, no Angular. Alright, and on our last form we dove right into our HTML template to start wiring up our form with Angular constructs. This time we're going to go over to our component and start configuring our form from here and we're going to want to do this in an OnInit method so let's implement OnInit. Okay, and importing and implementing OnInit is optional. We could've just created this function but implementing OnInit does give us a little bit of typescript help. Okay, so our form has two inputs, a first name and a last name. So we're going to create a form control for each of those like this. Okay, and now we need to add these controls to a form so we use a form group for that. So we'll create a profile form property on our component in a minute and we'll just set that to a new form group and then we set properties on this for each of the controls like this. Okay, so this has a first name and a last name property on it and those property values are set to these form controls that we just created and let's go ahead and create a property for this on our component. Okay, and we want a property on our component for this because the profile form is going to be accessed from the HTML template. Alright, now let's go ahead and import form group and form control. So now we've defined this form but we need to tell Angular which HTML elements these correspond to so let's go over to our template and first we'll bind our form element to the profile form like this. Okay, so this binds our form to the form group that we created in our component and then we need to specify for each of our input elements the property on that profile form that they should be bound to. Okay, and these values, first name and last name, need to match the property values of the form group here. Okay, and it looks like I've misspelled my component HTML. So that should be component. Okay, so this form and these inputs are now wired up to their form controls and the component and you may remember when we were doing the template driven forms that we had to import the Angular forms module into our module. Well model driven, or reactive forms, use a different module called the reactive forms module so we need to import that too. Okay, so up here we're going to also import reactive forms module and add it as an import here. Okay, so now if we go over and take a look at our app, let's refresh here and let's log in first. Okay, now if we go look at our profile page, here's our form and these controls are wired up to their component but there's one thing missing here, I'm already logged in and so my first name and last name should already be being displayed in these boxes and then we also haven't wired up our buttons yet. So let's go take care of that. 

(2)
First let's pre populate these fields with data from my profile. So over here in the component, if we look at our form controls here, we didn't pass in any parameters when we created our form controls. The first parameter is the value that you would like pre populated in the field so we can get the current user information from the auth service so let's import that and inject it, okay, now from the auth service I can get the current user's first name and last name and pass them into our form controls. Okay, so we're creating the first name and last name form controls and when they first render, they will have the values of the first and last name of the current user. Okay, so now let's wire up our cancel and save buttons. So let's come over to our HTML and then we'll add a click handler here and that will just call a cancel function. Alright, and then over here let's create that cancel function and that will just navigate to the events page and we'll have to inject that router. Okay, now our cancel button is wired up. Now let's wire up our save button. That wire up actually happens on the form over on our HTML so we'll use ngSubmit, like we did over on the template based form and we'll have it call saved profile and we'll pass in the profile forms value. So this seems pretty similar to the way template based forms work. Alright, now let's go create our save profile method and that will take the form values in. Okay, now we're going to want to call a method on our auth service to update the current user and we'll just pass in the values from the form. Okay, but this update current user method doesn't exist yet so let's go create that on our auth service. Alright, we'll just add that down here and we passed in the first name and then last name. Alright, and then we'll just do another fake implementation of this for now. Okay, so this is just going to update the first name and last name of our current user property that we've declared up here. Alright, let's go check this out. Okay, so if we refresh our app and log in, and then go to our profile page, there you can see that our first name and last name, which are the values that are currently hardcoded in our auth service are now being displayed in the first name and last name fields and if I change my name, and save it, then you can see my username changes up here but when I hit save it doesn't navigate after I save so let's just go update that. So after we save the user we want to do this same thing. Alright, now if I refresh and log in, and then go edit my profile, now when I make this change, and save, there, it updates my user and redirects me to the all events page. Okay, cool, so that's how you do reactive forms now let's take a look at validating reactive forms and there's a practice exercise for this clip, so go check that out.
*/