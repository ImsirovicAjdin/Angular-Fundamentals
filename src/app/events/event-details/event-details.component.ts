import { Component } from '@angular/core'
import { EventService } from '../shared/event.service'
import { ActivatedRoute } from '@angular/router'
import { IEvent } from '../shared/index';

@Component({
    templateUrl: './event-details.component.html',
    styles: [`
    .container { padding-left:20px; padding-right: 20px; }
    .event-image { height: 100px; }
  `]
})

export class EventDetailsComponent {
    event:IEvent

    constructor(private eventService:EventService, private route:ActivatedRoute) {
  
    }
    ngOnInit() {
        // this.event = this.eventService.getEvent(1)
        this.event = this.eventService.getEvent(+this.route.snapshot.params['id']) // we're casting to a number with the + in front of 'this' 
    }
}
/*
7.3
Creating Your First Template-based Form
(1)
Okay, let's create our first form. This will be a simple template based login form. Angular allows you to choose from two options when you create a form, template based or model based, which is also called reactive forms. Template based forms allow you to build your form completely in your HTML template, it's simple, and easy, and it works great for simple use cases but it has some limitations. For complex forms you end up with a lot of logic in your HTML if you're using template based forms and things like cross field validation are more difficult. Another limitation is that you can't unit test all your form and validation logic if you use template based forms but for simple forms, template based forms are great. Model based, or reactive forms, allow you to build your form and put a lot of your logic in your component instead of in the template and this has some other advantages that we'll talk about later. So let's create our first template based form. For this we'll create a new login component. We'll put that in our user module. And here's the basic shell for our component. Okay, and this is going to have enough HTML that we'll want it in a separate template so let's add a template Url, alright, and let's create that template file and let's grab the HTML from that template from our GitHub helper repo. Let's go over here in our app folder, in the user folder, there's this login component HTML. So let's grab the raw version of that and paste that in here, alright, there's nothing Angular specific here, this is all just plain HTML and you can see here that we have two inputs, a username and a password, and then we just have these login and cancel buttons. Okay, let's go declare this component in our module and add a route for it. So in our user module, we'll import it, and add it as a declaration. Alright, now let's add the route. Alright, let's go take a look at this. So if I change my Url here to user slash login, there we go, we have a login component now. So let's go wire up this form. 

(2)
Okay, so we're going to be using a few forms related directive and all of the forms directives are in their own modules so we need to go import the forms module and since this form is in our user module, we'll need to import it here. So up here with our Angular imports we'll add import forms module and that comes from Angular forms. Okay and now we just need to add this as an import. Okay so that gets us access to a number of different template based forms features. So let's go wire up our form so that we can log in. So when the user enters data into these fields, we need to get that data into our component so we can use it. Based on what we learned earlier about data binding, we could just bind to the input elements, input event like this. Okay so this expression would make it so that when input is entered into this input box, an event is fired and that event updates the username property of our component to be the value of this input box but that's difficult to remember the syntax for and cumbersome especially on a form with lots of elements where you would have to add this over and over. For that reason and others, Angular provides the ngModel directive that will allow us to bind input fields like this, ngModel gives us some extra forms related functionality that we'll explore shortly. Oftentimes when you see ngModel, you'll actually see it declared like this. This is commonly referred to as the banana in a box syntax and it represents a two-way binding. If you remember the syntax module, parentheses are used to bind in the HTML to component direction and it's typically used for responding to events, whereas the square brackets are used to bind in the component to HTMl direction and is typically used for displaying data from the component on the page. The reason while why you'll often see the banana in a box style binding, is that often forms are used for editing existing data and so you'll want to display the existing data and as you type, you'll want to update the data in the component. Thus, the need for both types of bindings but for a login form there's really nothing initially to display so we just need a one-way binding. It's always best to use just a one-way binding when that's all you need. So we'll update it back to how it was. Okay an ngModel requires us to define a name attribute so let's add that. You'll notice that we're setting ngModel and name to the same value, username, this is typical but it's not always the case. We'll explore this more later, for now we'll just set them both to username. Alright let's add this to the password field too. Okay, now the question is, where exactly are these ngModel bindings going to put the data? We don't have properties on our component to match them. So what are they binding to? Well right now they're just binding to the form and we can get access to the form by adding a local variable on the form element like this and we'll use that login form variable in our submit handler, we could just bind to the form submit event like this and technically this would work. When we submit the form, the login method on our component would be called and it would pass in the login form but Angular provides a directive called ngSubmit and we'll use that because that handles a few extra things like preventing the form from submitting to the server, for example, so it's best to use this binding instead and then over here we're using the login form local variable that we defined but there's a lot of info on a form object but all we're really interested in right now is the value so we'll just pass that in. Okay, now let's go add this login method on our component and for now, let's just log this out and see what this looks like. Okay, let's check this out. So let's come over here and refresh our login form and type in a username and a password. Alright, now let's open up our console log and click login. Okay, so if you remember, we passed in in our HTML login form dot value to our login method and then here we just console logged it out and so the login forms value is this object that has a username property and a password. This is actually a really convenient shape. It is simply an object with each of our form fields as properties so now we can just use these values to log our user in and now it seems like everything's working just fine here but we do have a problem. If we jump over to our terminal and stop our server, let's just go ahead and serve this in production mode like this. Notice we have a couple of errors here. So prod mode is catching more errors than dev mode. This will actually be fixed in a future version of the CLI and you'll start seeing these errors in dev mode too but either way we need to fix this. So this is happening because over here in our template, we're binding to these username and password properties but those properties don't exist on the component so we just need to go declare those. So over here in our component, in typescript we can just declare those like this. So we just declare those up here at the top of our component and now if we save that and go back over and build this again, we should see that those errors go away. There we go, now we're not getting errors anymore so just remember if you bind to something with ngModel, make sure you declare it on your component. So in the next clip we'll take a look at how to consume these values that are provided by our template based form. And there's a practice exercise for this clip, so go check that out.
*/