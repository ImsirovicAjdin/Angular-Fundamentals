import { Component } from '@angular/core'
import { EventService } from '../shared/event.service'
import { ActivatedRoute } from '@angular/router'


@Component({
    templateUrl: './event-details.component.html',
    styles: [`
    .container { padding-left:20px; padding-right: 20px; }
    .event-image { height: 100px; }
  `]
})

export class EventDetailsComponent {
    event:any

    constructor(private eventService:EventService, private route:ActivatedRoute) {
  
    }
    ngOnInit() {
        // this.event = this.eventService.getEvent(1)
        this.event = this.eventService.getEvent(+this.route.snapshot.params['id']) // we're casting to a number with the + in front of 'this' 
    }
}
/*
7.2
Using Models for Type Safety
Before we jump in I just wanted to remind you that we've made changes to this course to keep it up to date, this course was originally created without the CLI since it was still in beta. Because of these updates, you may notice some inconsistencies in the File Explorer over here. Those inconsistencies have been explained previously. So far everywhere where we've needed an event object like here in the event thumbnail component, we've just been working with plain old JavaScript objects and we've been using the any type, or not specifying a type at all. That is completely acceptable if you don't care to use much typescript and we haven't really had a need for it since our data has all been hardcoded but now that we're going to be creating new events, it might be nice to add some typing information to our application that will help us see data type errors in our code editor and will give us some compile time type safety. Let's actually create an event model that we can use here to tell typescript exactly what data shape to expect. We'll use this in a number of places so let's create it in our shared folder. So right here we'll create an event model. Okay, and we can either use an interface here or a class. It really doesn't matter which one you choose so we'll just use an interface to define each of the fields on an event like this. Okay, so here are the basic fields and all of these are required. We now have a location, an online Url field that can be null so we'll define them like this. So that question marks indicates that this field can be null and this one's actually an object and if location is defined, we want all of its fields to be provided so we will not make them nullable. Okay and then we have our online Url field that's also nullable, okay, and each event also has an array of sessions. We haven't talked much about sessions yet but we will be using these later in the app. Okay so we'll have a sessions property and it will be an array of ISession, let's go ahead and define ISession here. Okay, cool, now we have event and session models to work with. Let's go ahead and add these to the shared barrel. Alright, now let's go put this model to use. First let's come over to our event service and this is where we are currently hardcoding our event data so let's define the data type for this list of events, so here we'll specify that this is of type IEvent gray. Alright we need to go import that. Okay now let's come back down here. Okay, and right away we're seeing some benefits from having this be typed. Notice that our editor is giving us an error and if we hover over it, it says down here, type string is not assignable to type date and we can also see this error over in our console. So this is where our real time typescript compilation is happening and you can see that it's getting the same error down here and all of this is because down here when we're defining our event data, we're actually assigning strings to our date field. So let's fix that, we'll change these to be dates like this and then we'll do that for all of these sessions so I'll just search for this date field and replace each of these. Okay, cool, so now our data matches our model and you can see we're not getting an error anymore and now we can go specify the return type of our get event method to say that this is going to return an Ievent and then we want to specify the return type for our get event's method also. Now you might think that the return type for the get event's method is an array of IEvents, but we're actually using observables here and we're returning a subject, not an IEvent array. So we could specify that the type is subject and then subject is generic so it wants to know what data types it's going to contain inside of it, which is an IEvent array and then we'd specify here that this is a subject of type IEvent array also. Okay so this works but actually subject is a little too specific, we're going to be changing this to an observable later instead of a subject. And subject is a type of observable and, in fact, it implements observable. So we can go ahead and change this to type observable and we'll need to import that from our XJS. Okay, cool, this works so we're returning a subject, which is a type of observable so our return type now for our get events method is observable of type IEvent array. Okay, cool, so this service now specifies the data type that it returns. Let's go take advantage of this model in a few more places. So over here in our event thumbnail component let's import our new event model and now let's define our input variable to be of type IEvent, alright, and we can add the typing to our event's list component too. So down here we can say that our events property is of type IEvent array and we can specify the type in our event details component. So this is an IEvent. Alright and we could keep going and update everywhere where we use events like in our route guards and our resolvers and other places but let's call this good for now. This is a good example of the fact that you can use as much or as little typescript as you want in your app but now you know how to create and use data models in your application if you choose to. Again, it's not required if you prefer not to but it's available if you like the type safety. And if we go over to our site and refresh, we can see our site is still working now that we've added these data models.
*/