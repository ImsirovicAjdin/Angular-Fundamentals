import { Component } from '@angular/core'
import { EventService } from '../shared/event.service'
import { ActivatedRoute } from '@angular/router'
import { IEvent } from '../shared/index';

@Component({
    templateUrl: './event-details.component.html',
    styles: [`
    .container { padding-left:20px; padding-right: 20px; }
    .event-image { height: 100px; }
  `]
})

export class EventDetailsComponent {
    event:IEvent

    constructor(private eventService:EventService, private route:ActivatedRoute) {
  
    }
    ngOnInit() {
        // this.event = this.eventService.getEvent(1)
        this.event = this.eventService.getEvent(+this.route.snapshot.params['id']) // we're casting to a number with the + in front of 'this' 
    }
}
/*
7.5
Validating Template-based Forms
(1)
As it is now, we have a bit of a problem with our login form. I can actually log in without entering anything. This is partly due to the fact that have faked our auth service so we're not actually checking the user's credentials on the server yet but we should be able to catch this before the call to the auth service. The user shouldn't be able to submit this form without populating these fields. So let's add some validation that will prevent that. To start with, let's add required attributes to both of our input fields. Alright, and let's go see what that did. So we are getting some validation here but this actually isn't Angular doing this, this is basic HTML five validation. So that we're not confusing HTML five validation with Angular validation, let's just disable the HTML five validation with a no validate attribute on the form. Okay, let's go take a look now. If I refresh this and click login without populating the fields, you can see that the required field validation hasn't stopped us from submitting the form but Angular is providing us with some validation information and that information is available on this login form so I'm just going to paste in a bunch of temporary code here that'll allow us to learn a lot about the state of this login form. Don't bother to type all of this in, I'm just going to delete it here in a second, anyhow but this will show us a lot of information about this form. Okay, so you can see here that I'm going to be displaying a bunch of information about the login form and the controls on the login form so if we go back over and refresh our app and go to the login form, you can see I'm displaying a bunch of information about the form here, such as whether the form is valid, whether it's dirty or pristine, whether it's submitted, or whether it's been touched, and you can see that currently valid is false and also I'm displaying information about the username and password fields. Notice that these touched fields, when I click on username, as soon as I type something in here and leave it, that a bunch of these values changed. So the touched field changed as soon as I left the field and dirty also changed and notice that the username field is now valid but the password field is not valid and neither is the form, if I put a value in the password field, okay, now the password field is valid and so is the form. So while Angular didn't prevent us from submitting the form, it did tell us whether the form and various fields are valid or not and there's a wealth of information here about the different states of the form so you know if somebody has even attempted to type something in a field and whether those fields are valid and that all bubbles up to the form so that the form is only valid once all of its fields are valid. Okay, so let's go utilize some of these values. So first we'll delete all that HTML that we put in here 
(2)
and now let's disable the login button if the login form is not valid. So right here we're going to bind to this button's disabled property and we're going to set it to disabled if the login form is invalid. So now if I come over here, you can see that the login button is disabled and so now the user can no longer log in but we're not giving much info to the user about what's wrong with the form. Notice if I type in my username and password that the login button becomes available and I could submit the form here but we do need to give the user more information about this empty state and why they can't submit the form. So let's add a little validation message that shows up right after the labels. So we'll just add a little emphasis element here that says required and we'll do that for the password too and then we only want to show this if the username field is invalid and then we'll do the same for the password field and then we need to make sure that we use the safe navigator here because these fields are not always available on the login form controls. Okay, now let's just add a little bit of styling for these error messages. Okay, let's go check this out. So if we refresh our app and go to the login page, okay, you can see immediately our form cannot be submitted and we are being told that these fields are required. Okay, so technically this is accurate. These fields are invalid but it's a little annoying to display all the error messages before the user has even tried to do anything so let's just show these errors only if the fields have already been touched. So back over here in our HTML on the ngIf we will only show this if they are invalid and they have been touched. We'll do it for the password field too. Okay, let's check that out. Okay so we are not getting our error messages here and if I tab out of this field, then it shows up. There we go, that's working better but still the original state of the form isn't the greatest. Our form cannot be submitted but there are no error messages explaining why. So you could get creative and do whatever fits your application the best but one thing we could do is add a mouseover handler on the login button and display the error messages when the user mouses over the login button. That should be easy. What we'd like to do is add mouse enter and mouse leave to our login button but disabled buttons don't raise events so we'll have to wrap this button in a span and add the events to the span like this. Okay, so when the mouse enter event is fired on this span, we will set mouseover login to true and then on mouse leave we'll set mouseover login to false and we'll wrap this button in that span. Okay, now on our error messages we can make them only show if the fields are invalid and they're touched or if the user is mousing over the login button. Okay, so let's add parentheses around this here and we'll add an or mouseover login. Okay, and the same thing on password and then we just need to declare this mouseover login property so in our component, we'll just declare that right here, here we go. Okay, let's check that out. Alright, so we're not getting our error messages and if we hover over login, excellent, now it shows what's required. If I make this valid, now only password is required and then I can log in, awesome, so that's really cool how easy that is and how much power there is in those few properties that are available to us on the login form for validation. And there's a practice exercise for this clip, so go check that out.
*/