import { Component } from '@angular/core'
import { EventService } from '../shared/event.service'

@Component({
    templateUrl: './event-details.component.html',
    styles: [`
    .container { padding-left:20px; padding-right: 20px; }
    .event-image { height: 100px; }
  `]
})

export class EventDetailsComponent {
    event:any

    constructor(private eventService:EventService) {
  
    }
    ngOnInit() {
        this.event = this.eventService.getEvent(1)
        // this.event = this.eventService.getEvent(+this.route.snapshot.params['id'])
    }
}
/*
Adding Your First Route
Alright, so now we have this event details component, but how do we get to it? First, let's remind ourselves how we're currently displaying our events list component. Over here in our index. html file, you can see that we're loading our events app component. And if we go look at that component, you can see that, and it's HTML, it has two child components, a nav bar component and an events list component. So this events app component is the top-level app component for an entire app, and it gets loaded during our app's bootstrap process. And so it loads and is displayed when we first navigate to our app. And then it loads these nav bar and events list components. And so that's how our events list component is currently being displayed. And right now there's really no way to change that. What we really want to do is to always show the nav bar component, but instead of this events list component always being shown, we want to show whatever route-level component matches our URL. This is where routing comes in. So instead of putting this events list component here, we'll replace it with Angular's router outlet component. And then somehow we need to tell Angular, when a user requests a particular URL, display its corresponding component here. We do that by defining routes. So let's go create a routes file at the root of our app where we can define those. Okay, so the routes that we define for an application are going to basically be an array of route objects, will look something like this. And right now we need two routes. First we need one for our events list page. Okay, so this basically says, if the URL matches /events, then show this events list component wherever our router outlet component is. And remember, we just added that router outlet component right here in our app component. And now we need another route for our event details page. Okay, this route looks a little different because it has this :id on the end of it. That's basically a parameter placeholder where we expect a value to be passed in on the route. We'll talk more about this in the next clip. But this route will match things like /events/1 or /events/foo. And when it sees a route like that, we will display the event details component. And then we want a default route so that if the user navigates to the route of our site, it will take them also to the events list page. So that will look like this. Okay, so this path is a little bit different. It's saying, when the path is empty or when we're at the route of our site, then redirect to the route/events. And redirect routes need this pathMatch property, and there are two options for that. Either prefix or full. Prefix means redirect if the URL starts with the specified path string. And full means, redirect if it fully matches the specified path string. In our case, we just want to use full. Okay, now we just need to import our components. Okay, there's one more thing that we can do here. This actually would work as is. But Angular provides a TypeScript definition for this router config that will give us some extra IntelliSense and compile-time safety if we add it. So let's import that. And then we'll just add that type definition to our array like this. Okay, cool, now you can see, as I add a new path, if I hit ctrl+space in VS Code, you can see it gives me some extra information about properties that I can add to this route. And we'll talk more about a lot of these properties in a little bit. But it's nice that we get this IntelliSense here so that, as we add a path, we know we're doing the right thing. And if we were to misspell something, we would get some compile-time safety and warnings in our editor. Okay, so now we've defined our routes. We just need to tell Angular to load this config over in our app module. So first let's import our routes. And then we just need to add it as an import using Angular's router module like this. Okay, we need to import RouterModule. Okay, so down here, we just used RouterModule. forRoot to import our route into our app. Alright, one more thing that we need to do when we add routing to our app is we need to tell Angular where on our web server our app is hosted. For example, our app is actually hosted right at the root of our web server. But what if our app was hosted here? Angular needs to know this so that it knows what its routes are relative to so that it can parse the URL. So we do that by providing a base tag in our index. html. And you can see right here in the head, the Angular CLI has already created a base tag for us. And since our app is just hosted at the root of our website, the href is just slash. If it was hosted somewhere other than the root, we would just indicate that here. Okay, so we now have three routes defined, and our old events list page is now being routed to directly instead of hard-coded into the HTML of our app component. So that means, over in our events list component, we really don't need this selector anymore since we'll be routing directly to it. Okay, cool, we've been jumping around a little bit. So let's just recap what we actually did here related to routing. 

First, we added a router outlet component to our events app component here. 
And then we defined our routes for each of our pages, including a default route, 
and then we loaded our routes into our event module using the router module. 
And finally, we added our base tag to our index. html page. 

Okay, cool, that's pretty simple, really. Let's go check this out. So you can see, our events page is loading here. And the interesting thing is, notice that our URL is now /events. If I delete this and navigate directly to the root of the site, notice that it's redirecting me to /events. That's because of that redirect route that we added. And if I add a /1 on the end of this, then I get my event details page. Awesome, this is working great. There's just one exception here. If I navigate to event number two, I still get event number one regardless of what I put in here. That's because when we created our event details component, we just hard-coded the event ID 1. We really want to get that event ID off of the URL here. So let's take a look in the next clip at how we'd do that. And there's a practice exercise for this clip. So go check that out.
*/