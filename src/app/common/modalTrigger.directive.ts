import { Directive, OnInit, Inject, ElementRef } from '@angular/core'
import { JQ_TOKEN } from './jQuery.service'

@Directive({
    selector: '[modal-trigger]'
})
export class ModalTriggerDirective implements OnInit  {
    private el: HTMLElement;

    constructor(ref: ElementRef, @Inject(JQ_TOKEN) private $ : any ) {
        this.el = ref.nativeElement
    }
    
    ngOnInit() {
        this.el.addEventListener('click', e => {
            this.$('#simple-modal').modal({})
        })
    }
}
/*
12.06 Creating Directives - The Trigger Directive

12.06.03 Adding the directive

It's going to be called our modal trigger, so let's go into the common directory, and let's create a new file, and we'll call it modalTrigger. directive. ts. And of course we're going to have to do some importing, and we're going to import first from @angular/core, and normally we would import component, right? What's what we would normally import here, but we're not creating a component. We are creating a directive, so we're going to import {Directive}. This is a decorator that Angular provides that lets us create directives, so it's got that import. It will create the directive. We create it very similar to how we create components. Just like a component, it has a selector, but unlike a component, we don't just feed it a simple string, so for example with our simple-modal, it was simple dash modal, that's not what we want. Our selector is modal-trigger, but it's an attribute, so we use the common CSS selector syntax, and wrap it in square brackets, indicating that this is an attribute, not an element. And now we're going to export a class, and we'll call it the modalTriggerDirective, and what we'll want to do is when this directive is created, we want to attach a click event handler to whatever element it's created on. So let's bring in the OnInit interface, and we'll have our directive implement that. And we'll created the ngOnInit method, and inside of here, that's where we're going to call that modal function off of jQuery. So what we'll need here is we'll need jQuery inside of this class. We want to inject it into this class. So let's create a constructor, and we're going to bring in jQuery. In order to do that, of course we have to import that jQuery token that we created earlier on. And that's just a sibling file. And in order to inject that, we also need the inject function from @angular/core, and then we just call @Inject, passing in the jQuery token, and we'll create a private variable, the dollar sign, and we'll just assign this to any. Because the API for jQuery is really rather complex. An empty body for the constructor, and then our ngOnInit, we can now call this. $, which is the jQuery function. And we'll pass in the ID of the modal that we want to open up, which we defined not here. We defined it in our simple-modal. It's this ID, just simple-modal. So we use the hashtag simple-modal, and we call the modal method, and we have to pass in an empty object because it expects a configuration object. We're not going to give it any actual configuration parameters, so we pass an empty one. And that will open up the modal, but we're calling this OnInit. We don't want to call this WhenOnInit. Instead we want to listen to the click event. So what we need to do is get a handle to the element that this directive is on. And listen to its click event. So in order to get that element, we need to bring in an element ref, which is Angular 2's object, which is a pointer to a specific element. And then our constructor, in addition to jQuery, we also want to inject our element. So I'll so el, and the type is ElementRef, and what this does is it tells Angular when this directive is constructed, I also want to reference to the element that it's on. So again, down here in our NavBar, this directive is on this button element, so that's ultimately the element that we want. But we don't want the element ref, because that's kind of a wrapper for the DOM element. We want the actual DOM element. So, we're going to create a new property called el, which is an HTML element, which I haven't imported that. This is just a global Java script type. And here inside the constructor, I'm going to set this. el equal to the injected el. nativeElement, and maybe my naming is a little bit poor here. This el and this el are kind of confusing, so let's rename this. We'll just call this ref, and unfortunately our wrapping has brought this curly brace down onto another line, so let's get rid of this blank space. We don't need that. Okay, so we've got the native element now, and we can now add an event listener to it, which we do with this. el. Of course we're doing this inside our InIt, because we want this to happen when the directive is emitted, and it's just addEventListener. This is just plain old Java script in the browser. We're listening to the click event, and that takes a function as a second parameter, which receives an event object. We don't really care about the event object. We just want to call our modal whenever that button is clicked. Now of course, we need to save our changes here. And in the HTML file, we need to go into the index. We need to add that new modal trigger. And then we need to go into our app module, and bring in that trigger directive, and also add it to the list of declarations. Directives go under declarations just like components do. I'll save that, and now we can go back to the browser and refresh the page, and if I type in pipe, and click search, we get our popup, our modal dialog that shows us what sessions match that search string. If I close this modal and search for something else, like Angular, you can see we get a lot more results. So our modal dialog is now working, and if we were to click on one of these sessions, you can see that we've actually navigated to that session. The URL's changed to event/1, but before we finish up, we're still logging the results out to the console here. So let's fix that, go back to the code and into our NavBar component, and we'll take out this console. log. And there we go. We've created our directive. There is a practice exercise for this clip, which you can do now.
*/